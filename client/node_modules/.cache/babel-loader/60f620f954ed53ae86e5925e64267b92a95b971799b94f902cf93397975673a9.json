{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst cors = require('cors');\nconst {\n  spawn\n} = require('child_process');\nconst path = require('path');\nconst fs = require('fs'); // ✅ Make sure fs is imported\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst upload = multer({\n  dest: 'uploads/'\n});\n\n// ===== UPLOAD ROUTE =====\napp.post('/upload', upload.single('file'), (req, res) => {\n  const file = req.file;\n  const headers = ['age', 'gender', 'churn']; // Simulated for now\n  res.json({\n    message: 'Upload successful',\n    columns: headers\n  });\n});\n\n// ===== GENERATE CODE ROUTE =====\napp.post('/generate-code', (req, res) => {\n  const {\n    prompt,\n    headers,\n    sessionId\n  } = req.body;\n  if (!prompt || !headers || !sessionId) {\n    return res.status(400).json({\n      error: 'Prompt, headers, and sessionId are required'\n    });\n  }\n  const python = spawn('python', [path.join(__dirname, 'python', 'llm_engine.py'), prompt, JSON.stringify(headers), sessionId // ✅ Pass sessionId to Python for file naming\n  ]);\n  let output = '';\n  let errorOutput = '';\n  python.stdout.on('data', data => {\n    output += data.toString();\n  });\n  python.stderr.on('data', data => {\n    errorOutput += data.toString();\n    console.error('🐍 Python Error:', data.toString());\n  });\n  python.on('close', code => {\n    if (code === 0) {\n      res.json({\n        code: output\n      });\n    } else {\n      res.status(500).json({\n        error: 'Python script failed',\n        details: errorOutput || 'Unknown error'\n      });\n    }\n  });\n});\n\n// ===== DOWNLOAD ZIP ROUTE =====\napp.get('/download/:sessionId', (req, res) => {\n  const sessionId = req.params.sessionId;\n  const zipPath = path.join(__dirname, 'sessions', `${sessionId}.zip`);\n  if (fs.existsSync(zipPath)) {\n    res.download(zipPath, `${sessionId}.zip`);\n  } else {\n    res.status(404).json({\n      error: 'ZIP file not found.'\n    });\n  }\n});\napp.listen(5000, () => {\n  console.log('✅ Server is running on port 5000');\n});","map":{"version":3,"names":["express","require","multer","cors","spawn","path","fs","app","use","json","upload","dest","post","single","req","res","file","headers","message","columns","prompt","sessionId","body","status","error","python","join","__dirname","JSON","stringify","output","errorOutput","stdout","on","data","toString","stderr","console","code","details","get","params","zipPath","existsSync","download","listen","log"],"sources":["C:/Users/DELL/OneDrive/Desktop/mml/client/src/index.js"],"sourcesContent":["const express = require('express');\r\nconst multer = require('multer');\r\nconst cors = require('cors');\r\nconst { spawn } = require('child_process');\r\nconst path = require('path');\r\nconst fs = require('fs'); // ✅ Make sure fs is imported\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// ===== UPLOAD ROUTE =====\r\napp.post('/upload', upload.single('file'), (req, res) => {\r\n  const file = req.file;\r\n  const headers = ['age', 'gender', 'churn']; // Simulated for now\r\n  res.json({ message: 'Upload successful', columns: headers });\r\n});\r\n\r\n// ===== GENERATE CODE ROUTE =====\r\napp.post('/generate-code', (req, res) => {\r\n  const { prompt, headers, sessionId } = req.body;\r\n\r\n  if (!prompt || !headers || !sessionId) {\r\n    return res.status(400).json({ error: 'Prompt, headers, and sessionId are required' });\r\n  }\r\n\r\n  const python = spawn('python', [\r\n    path.join(__dirname, 'python', 'llm_engine.py'),\r\n    prompt,\r\n    JSON.stringify(headers),\r\n    sessionId // ✅ Pass sessionId to Python for file naming\r\n  ]);\r\n\r\n  let output = '';\r\n  let errorOutput = '';\r\n\r\n  python.stdout.on('data', (data) => {\r\n    output += data.toString();\r\n  });\r\n\r\n  python.stderr.on('data', (data) => {\r\n    errorOutput += data.toString();\r\n    console.error('🐍 Python Error:', data.toString());\r\n  });\r\n\r\n  python.on('close', (code) => {\r\n    if (code === 0) {\r\n      res.json({ code: output });\r\n    } else {\r\n      res.status(500).json({\r\n        error: 'Python script failed',\r\n        details: errorOutput || 'Unknown error',\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// ===== DOWNLOAD ZIP ROUTE =====\r\napp.get('/download/:sessionId', (req, res) => {\r\n  const sessionId = req.params.sessionId;\r\n  const zipPath = path.join(__dirname, 'sessions', `${sessionId}.zip`);\r\n\r\n  if (fs.existsSync(zipPath)) {\r\n    res.download(zipPath, `${sessionId}.zip`);\r\n  } else {\r\n    res.status(404).json({ error: 'ZIP file not found.' });\r\n  }\r\n});\r\n\r\napp.listen(5000, () => {\r\n  console.log('✅ Server is running on port 5000');\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}